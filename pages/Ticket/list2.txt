<template>
   <div class="col-12 fill-height pa-5">
      <div class="col-12 d-flex flex-column flex-md-row align-md-center pa-0">
         <div class="col-12 col-md-7 pa-0 d-flex flex-column">
            <span class="text-h5 font-weight-light">Ticket List</span>
            <span class="text-caption grey--text">Ticketing helps you accomplish everything you need to do to resolve the day-to-day IT tickets faster than ever.</span>
         </div>
         <v-spacer></v-spacer>
         <div class="col-12 col-md-5 pa-0 d-none d-md-flex flex-row justify-end my-2 my-md-0 flex-wrap">
            <div class="col-6 col-md-3 d-flex flex-row align-center">
               <Iconify iconName="majesticons:ticket-check" className="tw-text-2xl lightRed--text" />
               <v-divider vertical inset class="mx-2"></v-divider>
               <div class="d-flex flex-column justify-center align-start">
                  <span class="font-weight-bold lightRed--text">{{ closeCount }}</span>
                  <span class="tw-text-xs">Closed</span>
               </div>
            </div>
            <div class="col-6 col-md-3 d-flex flex-row align-center">
               <Iconify iconName="clarity:help-info-solid" className="tw-text-2xl calmBlue--text" />
               <v-divider vertical inset class="mx-2"></v-divider>
               <div class="d-flex flex-column justify-center align-start">
                  <span class="font-weight-bold calmBlue--text">{{ openCount }}</span>
                  <span class="tw-text-xs">Open</span>
               </div>
            </div>
            <div class="col-6 col-md-3 d-flex flex-row align-center">
               <Iconify iconName="ic:round-access-time-filled" className="tw-text-2xl warning--text" />
               <v-divider vertical inset class="mx-2"></v-divider>
               <div class="d-flex flex-column justify-center align-start">
                  <span class="font-weight-bold warning--text">{{ pendingCount }}</span>
                  <span class="tw-text-xs">Pending</span>
               </div>
            </div>
            <div class="col-6 col-md-3 d-flex flex-row align-center">
               <Iconify iconName="mdi:check-decagram" className="tw-text-xl success--text" />
               <v-divider vertical inset class="mx-2"></v-divider>
               <div class="d-flex flex-column justify-center align-start">
                  <span class="font-weight-bold success--text">{{ resolveCount }}</span>
                  <span class="tw-text-xs">Resolve</span>
               </div>
            </div>
         </div>
      </div>
      <div class="col-12 mt-4 d-flex flex-column flex-md-row align-md-center pa-0">
         <div class="col-12 col-md-2 pa-0 mr-md-3 d-flex flex-row">
            <v-menu
               ref="calendarMenu"
               v-model="calendarMenu"
               :close-on-content-click="false"
               :return-value.sync="dates"
               transition="scale-transition"
               offset-y
               min-width="auto"
               rounded="lg"
            >
            <template v-slot:activator="{ on, attrs }">
               <v-text-field
                  v-model="dateRangeText"
                  label="Picker in menu"
                  readonly
                  outlined
                  dense
                  hide-details="auto"
                  class="rounded-lg text-caption"
                  v-bind="attrs"
                  v-on="on"
               >
                  <template v-slot:label>
                     <div class="tw-text-sm">Created Date</div>
                  </template>
                  <template v-slot:prepend-inner>
                     <Iconify iconName="fa-solid:calendar-alt" className="tw-text-sm grey--text mr-1 my-1" />
                  </template>
               </v-text-field>
            </template>
            <v-date-picker
               v-model="dates"
               range
               no-title
               scrollable
               color="primary"
               class="tw-border-none"
            >
               <v-spacer></v-spacer>
               <v-btn
                  text
                  small
                  color="primary"
                  @click="calendarMenu = false"
               >
                  Cancel
               </v-btn>
               <v-btn
                  text
                  small
                  color="primary"
                  @click="resetDate()"
               >
                  Reset
               </v-btn>
               <v-btn
                  text
                  small
                  color="primary"
                  @click="$refs.calendarMenu.save(dates)"
               >
                  OK
               </v-btn>
            </v-date-picker>
            </v-menu>
         </div>
         <div class="d-flex mr-md-3 mt-2 mt-md-0 flex-grow-1">
            <v-text-field
               v-model="search"
               dense
               hide-details
               outlined
               class="text-capitalize text-caption rounded-lg"
            >
               <template v-slot:label>
                  <div class="tw-text-sm">Find ticket subject</div>
               </template>
               <template v-slot:prepend-inner>
                  <Iconify iconName="icon-park-outline:search" className="tw-text-sm grey--text mr-1 my-1" />
               </template>
            </v-text-field>
         </div>
         <div class="d-flex flex-row mt-2 mt-md-0">
            <v-menu rounded="lg" offset-y transition="slide-y-transition" :close-on-content-click="false">
               <template v-slot:activator="{ attrs, on}">
                  <v-btn v-bind="attrs" v-on="on" color="primary" outlined class="rounded-lg text-capitalize">Category <Iconify iconName="uil:angle-down" className="tw-text-base grey--text" /></v-btn>
               </template>

               <v-list dense>
                  <v-list-item-group v-model="category" active-class="tw-text-sm primary--text">
                     <v-hover v-slot="{ hover }">
                        <v-list-item :class="`text-caption ${hover && 'primary--text'} tw-transition-all tw-ease-in-out tw-duration-200`" @click="filterCategory(0)">
                           All Category
                        </v-list-item>
                     </v-hover>
                     <v-hover v-for="item in categoryList" :key="item.key" v-slot="{ hover }">
                        <v-list-item :class="`text-caption ${hover && 'primary--text'} tw-transition-all tw-ease-in-out tw-duration-200`" @click="filterCategory(item.categoryId)">
                           {{ item.category }}
                        </v-list-item>
                     </v-hover>
                  </v-list-item-group>
               </v-list>
            </v-menu>
            <v-btn color="primary" class="rounded-lg text-capitalize ml-2">New Ticket</v-btn>
         </div>
      </div>
      <div class="d-none d-md-flex flex-row flex-wrap mb-2 mt-2 justify-center align-end">
         <div>
            <span class="text-subtitle-2 font-weight-bold primary--text">{{ desserts.length }}</span>
            <span class="text-subtitle-2">Ticket</span>
         </div>
         <v-spacer></v-spacer>
         <div class="">
            <v-tabs height="35" background-color="transparent" ripple="false">
               <v-tab :ripple="false" class="text-caption" @click="filterState(10)">All</v-tab>
               <v-tab :ripple="false" class="text-caption" @click="filterState(1)">Pending</v-tab>
               <v-tab :ripple="false" class="text-caption" @click="filterState(2)">Open</v-tab>
               <v-tab :ripple="false" class="text-caption" @click="filterState(3)">Resolved</v-tab>
               <v-tab :ripple="false" class="text-caption" @click="filterState(0)">Close</v-tab>
            </v-tabs>
         </div>
      </div>
      <div class="col-12 pa-0 mt-3 mt-md-0 d-flex flex-column">
         <v-virtual-scroll
            :items="listData"
            :item-height="vScollheight"
            class="mb-4 overflow-auto"
            height="480"
         >
            <template v-slot:default="{ item }">
               <div class="col-12 my-2 my-md-4 tw-bg-white tw-shadow-md rounded-lg d-flex flex-column align-md-start pa-1 pa-md-1 tw-border-2 tw-border-primary tw-border-opacity-50">
                  <div class="col-12 d-flex flex-column flex-md-row pa-0 align-md-center">
                     <div class="d-flex flex-column col-12 col-md-6">
                        <div class="col-12 pa-0 d-flex flex-row align-center">
                           <NuxtLink :to="`/ticket/${item.ticketNumber}`" class="tw-text-lg tw-truncate font-weight-bold primary--text">
                              {{ item.subject }}
                           </NuxtLink>
                           <v-spacer></v-spacer>
                           <v-chip x-small outlined :color="`${ changeStateColor(item.status )}`" :class="`ml-3 `">
                              <span>{{ changeState(item.status) }}</span>
                           </v-chip>
                        </div>
                        <div class="col-12 pa-0 d-flex flex-row align-center">
                           <div class="d-flex flex-row align-center">
                              <span class="tw-text-xs grey--text">{{ item.creator }}</span>
                              <Iconify iconName="iconoir:nav-arrow-right" className="tw-text-xs grey--text" />
                              <span class="tw-text-xs grey--text ml-1">{{ item.creatorGroup }}</span>
                           </div>
                           <v-spacer></v-spacer>
                           <span class="tw-text-xs grey--text">{{ item.ticketNumber }}</span>
                        </div>
                     </div>
                     <div class="d-flex flex-column col-12 col-md-1">
                        <span class="tw-text-xs">Priority</span>
                        <span :class="`tw-text-xs tw-font-semibold ${ changeCriticalColor(item.priority) }`">{{ priorityName(item.priority) }}</span>
                     </div>
                     <div class="d-flex flex-row align-center col-12 col-md-3 pa-0">
                        <div class="d-flex flex-column col-6">
                           <span class="tw-text-xs">Category</span>
                           <span class="tw-text-xs tw-font-semibold">{{ item.category }}</span>
                        </div>
                        <div class="d-flex flex-column col-6">
                           <span class="tw-text-xs">Last Updated</span>
                           <span class="tw-text-xs tw-font-semibold">{{ $moment(item.created).fromNow() }}</span>
                        </div>
                     </div>
                     <div class="d-flex flex-column col-12 col-md-2">
                        <span class="tw-text-xs">Created</span>
                        <span class="tw-text-xs tw-font-semibold">{{ $moment(item.created).format('LL') }}</span>
                     </div>
                  </div>
               </div>
            </template>
         </v-virtual-scroll>
      </div>
   </div>
</template>

<script>
import Breadcump from '~/components/Breadcump.vue'
import { ticket } from './ticket'
export default {
   components: { Breadcump },
   data: () => ({
      items: [
         {
            text: 'Ticket System',
            disabled: true,
            href: 'breadcrumbs_dashboard',
         },
         {
            text: 'List',
            disabled: true,
            href: 'ticket/list',
         },
      ],
      search: '',
      status: 10,
      page: 1,
      pageCount: 0,
      itemsPerPage: 10,
      calendarMenu: false,
      dates: [new Date('1995-07-27').toISOString().substr(0, 10), (new Date(Date.now() - (new Date()).getTimezoneOffset() * 60000)).toISOString().substr(0, 10)],
      category: 0,
      categoryList: [
         {
            categoryId: 1,
            category: 'Custumer Problem',
         },
         {
            categoryId: 2,
            category: 'Internal Problem',
         },
         {
            categoryId: 3,
            category: 'New Installation',
         },
         {
            categoryId: 4,
            category: 'Dismantle',
         },
         {
            categoryId: 5,
            category: 'New Infrastructor',
         }
      ],
      headers: [
         { text: 'Ticket Number', sortable: false, value: 'ticketId', isShow: true},
         { text: 'Title', sortable: false, value: 'title', isShow: true},
         { text: 'creator', sortable: false, value: 'creator', isShow: true},
         { text: 'created', sortable: false, value: 'created', isShow: true},
         { text: 'desc', sortable: false, value: 'desc', isShow: true},
      ],
      desserts: [],
      ticketData: []
   }),
   computed: {
      listData() {
         return this.desserts
            .filter(item => this.dates.length > 1 && this.$moment(item.created).isBetween(this.dates[0], this.dates[1]))
            .filter(item => this.status < 4 ? (item.status == this.status) : true)
            .filter(item => item.subject.toLowerCase().includes(this.search.toLowerCase()))
      },
      dateRangeText () {
         if (this.dates.length > 1) {
            if (this.$moment(this.dates[0]).isBefore(this.$moment(this.dates[1]))) {
               return this.dates.join(' - ')
            } else {
               this.dates = [this.dates[1],this.dates[0]]
               return this.dates.join(' - ')
            }
         } else {
            return this.dates.join(' - ')
         }
      },
      showHeaders() {
         return this.headers.filter(i => i.isShow === true)
      },
      vScollheight () {
         switch (this.$vuetify.breakpoint.name) {
            case 'xs': return 300
            case 'sm': return 300
            case 'md': return 100
            case 'lg': return 100
            case 'xl': return 100
         }
      },
      closeCount() {
         return this.desserts.filter(item => item.status == 0).length
      },
      pendingCount() {
         return this.desserts.filter(item => item.status == 1).length
      },
      openCount() {
         return this.desserts.filter(item => item.status == 2).length
      },
      resolveCount() {
         return this.desserts.filter(item => item.status == 3).length
      },
   },
   mounted() {
      this.desserts = [...ticket]
      this.ticketData = [...ticket]
   },
   methods: {
      resetDate() {
         this.dates = [new Date('1995-07-27').toISOString().substr(0, 10), (new Date(Date.now() - (new Date()).getTimezoneOffset() * 60000)).toISOString().substr(0, 10)]
      },
      changeCriticalColor: priority => {
         return priority == 1 ? 'error--text' : ( priority == 2 ? 'danger--text' : 'success--text')
      },
      priorityName: priority => {
         return priority == 1 ? 'Critical' : ( priority == 2 ? 'High' : 'Low')
      },
      changeState: stats => {
         return stats == 1 ? 'Pending' : ( stats == 2 ? 'Open' : ( stats == 3 ? 'Resolved' : 'Closed'))
      },
      changeStateColor: stats => {
         return stats == 1 ? 'warning' : ( stats == 2 ? 'info' : ( stats == 3 ? 'success' : 'lightRed'))
      },
      selectHeader(value) {
         this.headers = this.headers.map(i => i.value === value ? {...i, isShow: !i.isShow} : {...i})
      },
      filterCategory(value) {
         if (value > 0) {
            this.desserts = this.ticketData.filter(item => item.categoryId == value)
         } else {
            this.desserts = this.ticketData
         }
      },
      filterState(value) {
         this.status = value < 4 ? value : 10
      }
   }
}
</script>
